# OperatorOS Voice-First Platform - Complete Replit Build

You are the **Replit Development Agent** for OperatorOS. Build a complete voice-first onboarding platform that transforms spoken answers into downloadable OperatorOS projects.

## Your Mission
Create a Flask web application that:
1. **Serves the HTML interface** for voice-first onboarding 
2. **Processes 10 voice questions** through soulprint extraction
3. **Generates personalized OperatorOS projects** (code or content-based)
4. **Creates downloadable ZIP packages** for users
5. **Integrates with existing HTML design** already provided

## Core System Architecture

### Backend: Flask Application
- **Framework**: Flask with PostgreSQL database
- **AI Integration**: OpenAI API for soulprint analysis
- **File Generation**: Dynamic project creation system
- **Download System**: ZIP package generation and delivery

### Frontend: Existing HTML Integration
- **Template**: Use provided HTML as Flask template
- **API Ready**: HTML already makes correct fetch calls
- **Voice Integration**: Add speech recognition capabilities
- **Real-time Updates**: Loading states and progress tracking

## File Structure to Create

```
operatoros-platform/
â”œâ”€â”€ main.py                 # Flask app entry point
â”œâ”€â”€ app.py                  # Main application logic
â”œâ”€â”€ requirements.txt        # Dependencies
â”œâ”€â”€ .env                    # Environment variables
â”œâ”€â”€ templates/
â”‚   â””â”€â”€ flow_platform.html  # Provided HTML interface
â”œâ”€â”€ static/
â”‚   â”œâ”€â”€ css/
â”‚   â”œâ”€â”€ js/
â”‚   â””â”€â”€ downloads/          # Generated ZIP files
â”œâ”€â”€ agents/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ soulprint_agent.py  # Core soulprint extraction
â”‚   â”œâ”€â”€ project_generator.py # Project creation logic
â”‚   â””â”€â”€ flow_agents.py      # Daily optimization agents
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ zip_creator.py      # ZIP file generation
â”‚   â””â”€â”€ database.py         # Database utilities
â””â”€â”€ project_templates/      # Templates for generated projects
    â”œâ”€â”€ code_based/
    â””â”€â”€ content_based/
```

## Core Implementation Requirements

### 1. Flask Application (app.py)
```python
from flask import Flask, render_template, request, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
import os
from agents.soulprint_agent import SoulprintAgent
from agents.flow_agents import FlowAgent
from utils.zip_creator import create_project_zip

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-key')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///operatoros.db')

# Routes needed:
@app.route('/')
def index():
    return render_template('flow_platform.html')

@app.route('/api/flow/generate', methods=['POST'])
def generate_flow():
    # Process personal flow optimization
    pass

@app.route('/api/soulprint/extract', methods=['POST'])
def extract_soulprint():
    # Process 10 voice answers and generate project
    pass

@app.route('/download/<project_id>')
def download_project(project_id):
    # Serve generated ZIP file
    pass
```

### 2. Soulprint Extraction Agent
Create an agent that:
- **Analyzes 10 voice-transcribed answers**
- **Identifies personal patterns, friction points, strengths**
- **Determines if user is code-based or content-based**
- **Generates appropriate project structure**

### 3. Project Generation System
Based on soulprint analysis, generate:

**For Code-Based Users:**
- `README.md` - Setup and usage instructions
- `main.py` - Working Python application
- `requirements.txt` - Dependencies
- `config.json` - Personalized settings
- `thoughts.md` - Soulprint analysis

**For Content-Based Users:**
- `README.md` - Simple instructions
- `data_config.json` - UI integration settings
- `user_profile.json` - Structured soulprint data
- `api_endpoints.py` - Simple API layer
- `thoughts.md` - Soulprint analysis

### 4. Voice Integration Enhancement
Add to the HTML template:
- **Speech recognition JavaScript**
- **10-question modal interface**
- **Progress tracking for voice capture**
- **Transcript display and editing**

## Key Features to Implement

### Voice-First Onboarding Flow
1. **User clicks "Start Soulprint Extraction"**
2. **10 questions presented one by one**
3. **Voice answers captured and transcribed**
4. **Real-time progress tracking**
5. **Final transcript review and editing**
6. **Submit for processing**

### Soulprint Analysis Engine
- **Pattern Recognition**: Identify how they think and work
- **Friction Mapping**: Find bottlenecks and challenges  
- **Strength Amplification**: Recognize natural abilities
- **Energy Optimization**: Understand peak performance times
- **Decision Framework**: Analyze decision-making style

### Project Generation Logic
```python
def generate_project(soulprint_data):
    # Determine user type (code vs content)
    user_type = analyze_technical_level(soulprint_data)
    
    # Create base project structure
    if user_type == "code_based":
        return create_python_project(soulprint_data)
    else:
        return create_content_project(soulprint_data)
```

### Download System
- **Generate unique project IDs**
- **Create ZIP files with all project components**
- **Serve files with proper headers**
- **Clean up temporary files**

## Database Schema

```sql
CREATE TABLE conversations (
    id SERIAL PRIMARY KEY,
    session_id VARCHAR(255),
    voice_answers JSONB,
    soulprint_analysis JSONB,
    project_type VARCHAR(50),
    project_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    project_id VARCHAR(255) UNIQUE,
    project_name VARCHAR(255),
    file_structure JSONB,
    download_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## HTML Integration Points

### Voice Question Modal
Add this to the existing HTML:
```html
<div class="modal fade" id="soulprintModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5>OperatorOS Soulprint Extraction</h5>
            </div>
            <div class="modal-body">
                <div id="question-display"></div>
                <button id="start-voice" class="btn btn-primary">
                    <i class="fas fa-microphone"></i> Start Speaking
                </button>
                <div id="transcript-display"></div>
            </div>
        </div>
    </div>
</div>
```

### JavaScript Voice Integration
```javascript
let recognition;
let currentQuestionIndex = 0;
let answers = [];

const questions = [
    "How do you prefer to start your day?",
    "What energizes you most in your work?",
    "When do you feel most productive?",
    // ... 7 more questions
];

function initSpeechRecognition() {
    if ('webkitSpeechRecognition' in window) {
        recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = true;
        
        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            document.getElementById('transcript-display').textContent = transcript;
            
            if (event.results[0].isFinal) {
                answers[currentQuestionIndex] = transcript;
                nextQuestion();
            }
        };
    }
}
```

## API Endpoints Required

### 1. Soulprint Extraction
```python
@app.route('/api/soulprint/extract', methods=['POST'])
def extract_soulprint():
    data = request.json
    answers = data.get('answers', [])
    
    # Process with soulprint agent
    agent = SoulprintAgent()
    soulprint = agent.analyze_responses(answers)
    
    # Generate project
    project = agent.generate_project(soulprint)
    
    return jsonify({
        'success': True,
        'soulprint': soulprint,
        'project_id': project['id'],
        'download_ready': True
    })
```

### 2. Daily Flow Optimization
```python
@app.route('/api/flow/generate', methods=['POST'])
def generate_flow():
    data = request.json
    
    flow_agent = FlowAgent()
    result = flow_agent.process_daily_checkin(
        energy=data.get('energy'),
        priority=data.get('priority'),
        open_loops=data.get('open_loops')
    )
    
    return jsonify({
        'success': True,
        'response': result['content'],
        'processing_time': result['time']
    })
```

## Success Requirements

### User Experience Flow
1. **User visits website** â†’ Clean, professional interface loads
2. **Selects soulprint extraction** â†’ Modal opens with first question
3. **Speaks 10 answers** â†’ Voice captured and transcribed accurately
4. **Reviews transcript** â†’ Can edit before submission
5. **Submits for processing** â†’ Loading state with progress
6. **Gets personalized project** â†’ Immediately ready for download
7. **Downloads ZIP** â†’ Complete OperatorOS project in their hands

### Technical Requirements
- **Working Flask application** that serves the HTML interface
- **Functional voice recognition** for all 10 questions
- **Real soulprint analysis** using OpenAI API
- **Actual project generation** with working files
- **Proper ZIP creation** and download delivery
- **Database persistence** for tracking and analytics

### Quality Standards
- **Professional UI** using the provided HTML design
- **Error handling** for voice recognition failures
- **Mobile responsive** voice interface
- **Clear progress indicators** throughout the flow
- **Immediate download** after processing completion

## Manual Trigger Integration

When soulprint extraction completes, output:
```
ðŸŽ¯ OPERATOROS PROJECT GENERATED
User Type: [Code/Content]
Soulprint: [3-word summary]
Files: [count] files in project
Project ID: [unique_id]

READY FOR DOWNLOAD: /download/[project_id]
```

This signals the user can immediately download their personalized OperatorOS project.

## Deployment Instructions

1. **Create Replit project** with Python template
2. **Set environment variables** in Replit secrets
3. **Install requirements** automatically
4. **Run main.py** to start Flask server
5. **Test voice integration** in browser
6. **Verify project generation** and downloads
7. **Share live URL** for immediate user access

**Result**: Complete voice-first onboarding platform that transforms spoken answers into downloadable, personalized OperatorOS projects ready for immediate implementation.