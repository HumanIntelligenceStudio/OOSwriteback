# ðŸš€ Replit Flow Platform - Dual-Purpose Life & Project Builder

## Build this as a Flask web application that serves as both a personal life optimization system AND a project development platform.

---

## ðŸŽ¯ **CORE SYSTEM ARCHITECTURE**

### **Dual-Mode Operation**
Create a platform with two primary modes that can be toggled:

1. **Personal Flow Mode** - Daily life optimization and decision clarity
2. **Project Builder Mode** - Business/creative project development and execution

### **Shared Infrastructure**
- Flask backend with PostgreSQL database
- Bootstrap-based responsive UI
- Session management for user persistence
- Agent-based AI interaction system

---

## ðŸ§  **AGENT SYSTEM DESIGN**

### **Personal Flow Agents**
```python
class FlowAgent:
    """Core personal optimization agent"""
    
class EnergyAgent:
    """Energy level assessment and optimization"""
    
class FocusAgent:
    """Attention management and deep work optimization"""
    
class LoopAgent:
    """Open loop identification and closure"""
    
class ReflectionAgent:
    """Daily reflection and pattern recognition"""
```

### **Project Builder Agents**
```python
class ProjectAnalystAgent:
    """Project scope and strategy analysis"""
    
class ProjectResearcherAgent:
    """Market research and competitive intelligence"""
    
class ProjectWriterAgent:
    """Documentation and implementation guides"""
    
class ProjectRefinerAgent:
    """Quality assurance and optimization"""
```

---

## ðŸŽ¨ **USER INTERFACE SPECIFICATIONS**

### **Main Dashboard Layout**
```html
<!-- Mode Toggle at Top -->
<div class="mode-toggle">
    <button class="btn btn-primary" id="personal-mode">Personal Flow</button>
    <button class="btn btn-outline-primary" id="project-mode">Project Builder</button>
</div>

<!-- Dynamic Content Area -->
<div id="flow-interface">
    <!-- Personal Flow Interface -->
</div>

<div id="project-interface" style="display:none;">
    <!-- Project Builder Interface -->
</div>
```

### **Personal Flow Interface**
```html
<div class="flow-container">
    <h2>Daily Flow Check-In</h2>
    
    <!-- 3 Core Questions -->
    <div class="question-cards">
        <div class="card mb-3">
            <div class="card-body">
                <h5>Energy Level Today</h5>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-success">High</button>
                    <button type="button" class="btn btn-outline-warning">Medium</button>
                    <button type="button" class="btn btn-outline-danger">Low</button>
                </div>
            </div>
        </div>
        
        <div class="card mb-3">
            <div class="card-body">
                <h5>One Thing to Complete Today</h5>
                <textarea class="form-control" placeholder="What's the ONE thing?"></textarea>
            </div>
        </div>
        
        <div class="card mb-3">
            <div class="card-body">
                <h5>Open Loops from Yesterday</h5>
                <textarea class="form-control" placeholder="What's still on your mind?"></textarea>
            </div>
        </div>
    </div>
    
    <button class="btn btn-primary" id="generate-flow">Generate Today's Flow</button>
    
    <!-- Flow Output -->
    <div id="flow-output" class="mt-4"></div>
</div>
```

### **Project Builder Interface**
```html
<div class="project-container">
    <h2>Project Development Studio</h2>
    
    <!-- Project Input -->
    <div class="card mb-4">
        <div class="card-body">
            <h5>Describe Your Project Vision</h5>
            <textarea class="form-control" rows="4" placeholder="What do you want to build? Be as detailed or as brief as you want..."></textarea>
        </div>
    </div>
    
    <!-- Agent Selection -->
    <div class="card mb-4">
        <div class="card-body">
            <h5>Select Development Path</h5>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="projectType" value="business">
                        <label class="form-check-label">Business Project</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="projectType" value="creative">
                        <label class="form-check-label">Creative Project</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <button class="btn btn-success" id="build-project">Build Project Strategy</button>
    
    <!-- Project Output -->
    <div id="project-output" class="mt-4"></div>
</div>
```

---

## ðŸ”§ **BACKEND IMPLEMENTATION**

### **Main Flask Application Structure**
```python
from flask import Flask, render_template, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import uuid

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://user:pass@localhost/flowplatform'
app.config['SECRET_KEY'] = 'your-secret-key'
db = SQLAlchemy(app)

# Models
class FlowSession(db.Model):
    id = db.Column(db.String, primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = db.Column(db.String, nullable=False)
    mode = db.Column(db.String, nullable=False)  # 'personal' or 'project'
    input_data = db.Column(db.JSON)
    output_data = db.Column(db.JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class UserPreferences(db.Model):
    user_id = db.Column(db.String, primary_key=True)
    preferred_mode = db.Column(db.String, default='personal')
    energy_patterns = db.Column(db.JSON)
    project_history = db.Column(db.JSON)
```

### **Core Routes**
```python
@app.route('/')
def index():
    if 'user_id' not in session:
        session['user_id'] = str(uuid.uuid4())
    return render_template('index.html')

@app.route('/api/flow/generate', methods=['POST'])
def generate_flow():
    user_input = request.json
    
    # Analyze energy, priority, and loops
    flow_agent = FlowAgent()
    response = flow_agent.generate_daily_flow(
        energy=user_input['energy'],
        priority=user_input['priority'],
        open_loops=user_input['open_loops']
    )
    
    # Save session
    flow_session = FlowSession(
        user_id=session['user_id'],
        mode='personal',
        input_data=user_input,
        output_data=response
    )
    db.session.add(flow_session)
    db.session.commit()
    
    return jsonify(response)

@app.route('/api/project/build', methods=['POST'])
def build_project():
    user_input = request.json
    
    # Execute project building agent chain
    analyst = ProjectAnalystAgent()
    researcher = ProjectResearcherAgent()
    writer = ProjectWriterAgent()
    refiner = ProjectRefinerAgent()
    
    # Execute chain
    analysis = analyst.analyze(user_input['vision'])
    research = researcher.research(analysis)
    strategy = writer.create_strategy(analysis, research)
    final_output = refiner.refine(strategy)
    
    # Save session
    project_session = FlowSession(
        user_id=session['user_id'],
        mode='project',
        input_data=user_input,
        output_data=final_output
    )
    db.session.add(project_session)
    db.session.commit()
    
    return jsonify(final_output)
```

---

## ðŸ§  **AGENT PERSONALITIES & LOGIC**

### **Personal Flow Agent**
```python
class FlowAgent:
    def __init__(self):
        self.system_prompt = """You are my Flow Agent, a personal OperatorOS module designed to help me structure my day, reduce decision fatigue, and move through life intentionally.

Your purpose is not to overwhelm me with planning, but to:
- Reflect my current energy and priorities back to me
- Suggest the lowest-friction next move
- Help me close open loops
- Remind me of what I said mattered

Your voice is calm, clear, and grounded. You are not motivational â€” you are operational."""

    def generate_daily_flow(self, energy, priority, open_loops):
        prompt = f"""
        Energy Level: {energy}
        Today's Priority: {priority}
        Open Loops: {open_loops}
        
        Generate a daily flow plan that respects my energy level and helps me move clearly today.
        
        Format your response as:
        ## Today's Flow Plan
        
        ### Action Plan
        [1-3 actions max, respecting energy level]
        
        ### Reflection
        [What you're reflecting back to me about my priorities]
        
        ### Loop Log
        [How to handle open loops - reschedule, delegate, or drop]
        """
        
        # Call OpenAI API with this prompt
        return self._call_openai(prompt)
```

### **Project Analyst Agent**
```python
class ProjectAnalystAgent:
    def __init__(self):
        self.system_prompt = """You are the Project Analyst Agent, responsible for breaking down project visions into strategic frameworks.

Your role:
- Analyze project scope and feasibility
- Identify key success factors and potential risks
- Define clear objectives and milestones
- Suggest optimal development approaches

Your output should be strategic, actionable, and set the foundation for the research and writing phases."""

    def analyze(self, project_vision):
        prompt = f"""
        Analyze this project vision: {project_vision}
        
        Provide:
        1. Project Scope Analysis
        2. Key Success Factors
        3. Risk Assessment
        4. Recommended Development Approach
        5. Core Questions for Research
        """
        
        return self._call_openai(prompt)
```

---

## ðŸ“± **FRONTEND JAVASCRIPT LOGIC**

### **Mode Switching**
```javascript
// Mode Toggle Logic
document.getElementById('personal-mode').addEventListener('click', function() {
    switchMode('personal');
});

document.getElementById('project-mode').addEventListener('click', function() {
    switchMode('project');
});

function switchMode(mode) {
    if (mode === 'personal') {
        document.getElementById('flow-interface').style.display = 'block';
        document.getElementById('project-interface').style.display = 'none';
        document.getElementById('personal-mode').classList.add('btn-primary');
        document.getElementById('personal-mode').classList.remove('btn-outline-primary');
        document.getElementById('project-mode').classList.add('btn-outline-primary');
        document.getElementById('project-mode').classList.remove('btn-primary');
    } else {
        document.getElementById('flow-interface').style.display = 'none';
        document.getElementById('project-interface').style.display = 'block';
        document.getElementById('project-mode').classList.add('btn-primary');
        document.getElementById('project-mode').classList.remove('btn-outline-primary');
        document.getElementById('personal-mode').classList.add('btn-outline-primary');
        document.getElementById('personal-mode').classList.remove('btn-primary');
    }
    
    // Save preference
    localStorage.setItem('preferredMode', mode);
}
```

### **Personal Flow Generation**
```javascript
document.getElementById('generate-flow').addEventListener('click', async function() {
    const energy = document.querySelector('input[name="energy"]:checked')?.value;
    const priority = document.querySelector('textarea[placeholder="What\'s the ONE thing?"]').value;
    const openLoops = document.querySelector('textarea[placeholder="What\'s still on your mind?"]').value;
    
    if (!energy || !priority) {
        alert('Please answer the energy and priority questions.');
        return;
    }
    
    // Show loading
    document.getElementById('flow-output').innerHTML = '<div class="spinner-border" role="status"></div>';
    
    try {
        const response = await fetch('/api/flow/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                energy: energy,
                priority: priority,
                open_loops: openLoops
            })
        });
        
        const result = await response.json();
        
        // Display formatted result
        document.getElementById('flow-output').innerHTML = `
            <div class="card">
                <div class="card-body">
                    ${marked.parse(result.response)}
                </div>
            </div>
        `;
        
    } catch (error) {
        document.getElementById('flow-output').innerHTML = `
            <div class="alert alert-danger">
                Error generating flow plan. Please try again.
            </div>
        `;
    }
});
```

### **Project Building Logic**
```javascript
document.getElementById('build-project').addEventListener('click', async function() {
    const vision = document.querySelector('textarea[placeholder*="What do you want to build"]').value;
    const projectType = document.querySelector('input[name="projectType"]:checked')?.value;
    
    if (!vision || !projectType) {
        alert('Please describe your project and select a development path.');
        return;
    }
    
    // Show loading with progress
    document.getElementById('project-output').innerHTML = `
        <div class="card">
            <div class="card-body">
                <h5>Building Your Project Strategy...</h5>
                <div class="progress mb-3">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 25%">
                        Analyzing...
                    </div>
                </div>
                <div id="progress-text">Starting project analysis...</div>
            </div>
        </div>
    `;
    
    try {
        const response = await fetch('/api/project/build', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                vision: vision,
                type: projectType
            })
        });
        
        const result = await response.json();
        
        // Display formatted result with download option
        document.getElementById('project-output').innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h5>Project Strategy Complete</h5>
                </div>
                <div class="card-body">
                    ${marked.parse(result.strategy)}
                    
                    <div class="mt-3">
                        <button class="btn btn-success" onclick="downloadProjectPlan('${result.download_id}')">
                            <i class="fas fa-download"></i> Download Complete Plan
                        </button>
                    </div>
                </div>
            </div>
        `;
        
    } catch (error) {
        document.getElementById('project-output').innerHTML = `
            <div class="alert alert-danger">
                Error building project strategy. Please try again.
            </div>
        `;
    }
});
```

---

## ðŸŽ¨ **CSS STYLING**

### **Dark Theme Flow Design**
```css
/* Custom Flow Platform Styles */
body {
    background-color: #1a1a1a;
    color: #ffffff;
    font-family: 'Inter', sans-serif;
}

.mode-toggle {
    background: #2d2d2d;
    padding: 1rem;
    border-radius: 10px;
    margin-bottom: 2rem;
    text-align: center;
}

.question-cards .card {
    background: #2d2d2d;
    border: 1px solid #444;
    transition: all 0.3s ease;
}

.question-cards .card:hover {
    border-color: #007bff;
    box-shadow: 0 0 20px rgba(0, 123, 255, 0.3);
}

.flow-container, .project-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
}

.btn-group .btn {
    min-width: 80px;
}

#flow-output, #project-output {
    animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Energy Level Visual Indicators */
.energy-high { border-left: 4px solid #28a745; }
.energy-medium { border-left: 4px solid #ffc107; }
.energy-low { border-left: 4px solid #dc3545; }

/* Progress Animation */
.progress-bar-animated {
    animation: progress-bar-stripes 1s linear infinite;
}
```

---

## ðŸ“Š **DATABASE SCHEMAS**

### **Complete Database Structure**
```sql
-- Users table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Flow sessions table
CREATE TABLE flow_sessions (
    id VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    mode VARCHAR(50) NOT NULL,
    input_data JSONB,
    output_data JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- User preferences table
CREATE TABLE user_preferences (
    user_id VARCHAR(255) PRIMARY KEY,
    preferred_mode VARCHAR(50) DEFAULT 'personal',
    energy_patterns JSONB DEFAULT '{}',
    project_history JSONB DEFAULT '[]',
    notification_settings JSONB DEFAULT '{}',
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Daily patterns table for personal optimization
CREATE TABLE daily_patterns (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    energy_level VARCHAR(20),
    completed_priority TEXT,
    open_loops_count INTEGER DEFAULT 0,
    satisfaction_score INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Project tracking table
CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    project_name VARCHAR(255),
    project_type VARCHAR(50),
    status VARCHAR(50) DEFAULT 'active',
    vision_text TEXT,
    strategy_output JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
```

---

## ðŸš€ **DEPLOYMENT INSTRUCTIONS**

### **Replit Setup Steps**

1. **Create new Replit project:**
   ```bash
   # Select Python template
   # Name: "flow-platform"
   ```

2. **Install dependencies in requirements.txt:**
   ```
   Flask==2.3.3
   Flask-SQLAlchemy==3.0.5
   psycopg2-binary==2.9.7
   openai==0.28.1
   python-dotenv==1.0.0
   requests==2.31.0
   ```

3. **Environment variables in .env:**
   ```
   OPENAI_API_KEY=your-openai-key
   DATABASE_URL=postgresql://user:pass@localhost/flowplatform
   SECRET_KEY=your-secret-key-here
   FLASK_ENV=development
   ```

4. **Main application file (main.py):**
   ```python
   from app import app, db
   
   if __name__ == '__main__':
       with app.app_context():
           db.create_all()
       app.run(host='0.0.0.0', port=5000, debug=True)
   ```

5. **File structure:**
   ```
   /
   â”œâ”€â”€ main.py
   â”œâ”€â”€ app.py
   â”œâ”€â”€ requirements.txt
   â”œâ”€â”€ .env
   â”œâ”€â”€ agents/
   â”‚   â”œâ”€â”€ flow_agent.py
   â”‚   â”œâ”€â”€ project_agents.py
   â”‚   â””â”€â”€ base_agent.py
   â”œâ”€â”€ templates/
   â”‚   â”œâ”€â”€ index.html
   â”‚   â””â”€â”€ base.html
   â”œâ”€â”€ static/
   â”‚   â”œâ”€â”€ css/
   â”‚   â”œâ”€â”€ js/
   â”‚   â””â”€â”€ images/
   â””â”€â”€ utils/
       â”œâ”€â”€ database.py
       â””â”€â”€ helpers.py
   ```

---

## ðŸŽ¯ **SUCCESS METRICS & FEATURES**

### **Personal Flow Mode Success Indicators**
- Daily completion rate of stated priorities
- Reduction in reported open loops over time
- User satisfaction scores with daily plans
- Energy level optimization patterns

### **Project Builder Mode Success Indicators**
- Project completion rates
- Quality of generated strategies (user ratings)
- Download rates of project plans
- User return rates for new projects

### **Advanced Features to Add**
- **AI Learning:** System learns user patterns and preferences
- **Calendar Integration:** Connect with Google/Outlook calendars
- **Habit Tracking:** Monitor daily patterns and streaks
- **Team Collaboration:** Share projects with team members
- **Export Options:** PDF, Word, and JSON exports
- **Mobile Responsive:** Works perfectly on all devices

---

## ðŸ”§ **IMPLEMENTATION PRIORITY**

### **Phase 1: Core Flow System (Week 1)**
- Basic Flask app with dual-mode interface
- Personal Flow Agent with 3-question system
- Simple project input and basic strategy generation
- PostgreSQL database integration

### **Phase 2: Enhanced UX (Week 2)**
- Polished UI with animations and transitions
- Progress tracking and visual feedback
- Session persistence and user preferences
- Mobile responsive design

### **Phase 3: Advanced Features (Week 3)**
- Pattern recognition and learning
- Export and download capabilities
- Advanced project agent chain
- Performance optimization

### **Phase 4: Production Ready (Week 4)**
- Security enhancements
- Error handling and logging
- User analytics and insights
- Documentation and testing

---

**This platform serves as both a personal life optimization tool AND a professional project development system, giving users the power to build clarity in their daily life while also building their next big project.**