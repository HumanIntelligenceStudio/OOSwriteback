# 🧪 OperatorOS Functional Test Prompt

## Test Objective
Validate complete OperatorOS loop execution: Analyst → Researcher → Writer with proper handoffs and loop closure.

## Test Input Prompt
```
I need to create a personal finance app that helps college students track spending, set budgets, and avoid debt. The app should be simple enough for someone with no financial experience but sophisticated enough to actually prevent overspending.
```

## Expected Execution Flow

### 1. 🔍 Analyst Agent Should:
- Analyze the college student finance app need
- Identify key requirements (simplicity + sophistication balance)
- Generate research question about existing solutions
- **End with:** `NEXT AGENT QUESTION: [specific research task]`

### 2. 📚 Researcher Agent Should:
- Research college student finance apps and spending prevention tools
- Provide comprehensive landscape of existing solutions
- Focus on simplicity vs sophistication balance
- **End with:** `NEXT AGENT QUESTION: [specific writing task]`

### 3. ✍️ Writer Agent Should:
- Create actionable implementation guide
- Provide specific features and design recommendations
- Include next steps for development
- **End with:** `NEXT AGENT QUESTION: [meaningful follow-up]`

## Test Validation Checklist

### ✅ Loop Mechanics
- [ ] Analyst completes and generates next question
- [ ] Researcher auto-triggers from Analyst question
- [ ] Writer auto-triggers from Researcher question
- [ ] All agents use proper "NEXT AGENT QUESTION:" format
- [ ] Loop completes without manual intervention

### ✅ Response Quality
- [ ] Each response is >50 characters (minimum validation)
- [ ] Responses are contextually relevant to college finance app
- [ ] Each agent builds upon previous agent's work
- [ ] Final output provides actionable implementation guidance

### ✅ Technical Performance
- [ ] No timeout errors (15-second limit per agent)
- [ ] No retry failures (max 3 attempts per agent)
- [ ] Database persistence working (conversation saved)
- [ ] Processing time under 20 seconds total
- [ ] Human-Clarity scores calculated for each response

### ✅ Error Handling
- [ ] No critical errors in logs
- [ ] Proper error recovery if minor issues occur
- [ ] Admin notifications sent appropriately
- [ ] Session management working correctly

## How to Execute Test

### Option 1: Full Loop API Test
```bash
curl -X POST https://your-replit-url.com/execute_full_loop \
  -H "Content-Type: application/json" \
  -d '{"input": "I need to create a personal finance app that helps college students track spending, set budgets, and avoid debt. The app should be simple enough for someone with no financial experience but sophisticated enough to actually prevent overspending."}'
```

### Option 2: Web Interface Test
1. Navigate to the OperatorOS web interface
2. Input the test prompt in the chat interface
3. Observe automatic agent progression
4. Verify complete loop closure

## Success Criteria

### 🎯 **PASS Conditions:**
- All 3 agents execute successfully
- Total processing time < 20 seconds
- 0 critical errors in execution
- Proper question handoffs between agents
- Final output addresses college finance app development
- Database conversation record created
- Human-Clarity scores show progression

### ❌ **FAIL Conditions:**
- Any agent fails after 3 retry attempts
- Timeout errors preventing completion
- Missing "NEXT AGENT QUESTION:" format
- Loop doesn't auto-trigger next agent
- Critical database or API errors
- Response quality insufficient (<50 chars)

## Expected Output Format

```
🚀 STARTING FULL OPERATOROS LOOP
📝 Initial Input: [college finance app prompt]

🔍 STEP 1: EXECUTING ANALYST AGENT
✅ AGENT COMPLETED: Analyst in ~4-6s
📚 STEP 2: AUTO-TRIGGERING RESEARCHER AGENT  
✅ AGENT COMPLETED: Researcher in ~5-7s
✍️ STEP 3: AUTO-TRIGGERING WRITER AGENT
✅ AGENT COMPLETED: Writer in ~4-6s

OPERATOROS LOOP STATUS: ✅ COMPLETE
TOTAL PROCESSING TIME: ~14-18 seconds
CONVERSATION COMPLETION: ✅ YES
LOOP CLOSURE: ✅ VERIFIED
```

## Troubleshooting Guide

### If Analyst Fails:
- Check OpenAI API key configuration
- Verify input validation passes
- Review system prompt formatting

### If Auto-Triggering Fails:
- Confirm "NEXT AGENT QUESTION:" format in responses
- Check question extraction logic
- Verify agent index progression

### If Database Issues:
- Check PostgreSQL connection health
- Verify conversation creation logic
- Review session management

### If Timeout Issues:
- Increase timeout from 15s to 20s if needed
- Check OpenAI API response times
- Review retry mechanism logic

---

**Run this test to confirm OperatorOS is fully functional and ready for production use.**