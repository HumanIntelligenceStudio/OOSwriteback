# OperatorOS Voice Onboarding - Error Fix & Enhancement
## Replit Agent Prompt to Fix Processing Issues

You need to fix the voice onboarding processing error and enhance the system. The user is seeing "Failed to process your responses. Please try again." 

## Issues to Address

### 1. Backend API Error
The `/api/demo-voice-onboarding` endpoint is likely failing. Check for:
- **Missing OpenAI API key** configuration
- **Database connection** issues
- **Route implementation** problems
- **Error handling** gaps

### 2. Frontend-Backend Connection
The JavaScript is making API calls but getting failures:
- **Fetch request** formatting
- **Error response** handling
- **Loading state** management
- **User feedback** improvement

## Complete Fix Implementation

### 1. Update Flask App with Proper Error Handling

```python
# Add to your main Flask app (app.py or main.py)

@app.route('/api/demo-voice-onboarding', methods=['POST'])
@limiter.limit("5 per minute")
def demo_voice_onboarding():
    """Voice-first soulprint extraction with enhanced error handling"""
    try:
        # Validate request
        if not request.is_json:
            return jsonify({
                'success': False, 
                'error': 'Content-Type must be application/json'
            }), 400
        
        data = request.json
        if not data:
            return jsonify({
                'success': False, 
                'error': 'No data provided'
            }), 400
        
        # Extract responses
        responses = data.get('responses', [])
        if not responses:
            return jsonify({
                'success': False, 
                'error': 'No voice responses provided'
            }), 400
        
        if len(responses) != 10:
            return jsonify({
                'success': False, 
                'error': f'Expected 10 responses, got {len(responses)}'
            }), 400
        
        # Validate OpenAI API key
        if not openai.api_key:
            return jsonify({
                'success': False,
                'error': 'OpenAI API key not configured'
            }), 500
        
        # Process soulprint extraction
        start_time = datetime.utcnow()
        
        # Create comprehensive soulprint analysis
        soulprint_analysis = extract_comprehensive_soulprint(responses)
        
        # Generate personalized OperatorOS project
        project_data = generate_voice_based_project(soulprint_analysis, responses)
        
        # Create downloadable package
        project_id = str(uuid.uuid4())[:8]
        zip_path = create_soulprint_project_zip(project_id, project_data, soulprint_analysis)
        
        # Save to database
        conversation = Conversation(
            session_id=session.get('session_id', str(uuid.uuid4())),
            voice_answers=responses,
            soulprint_analysis=soulprint_analysis,
            project_id=project_id,
            project_type='voice_onboarding',
            processing_time=(datetime.utcnow() - start_time).total_seconds()
        )
        db.session.add(conversation)
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Soulprint extracted successfully!',
            'soulprint_summary': soulprint_analysis.get('summary', 'Complete operational analysis'),
            'project_id': project_id,
            'download_url': f'/download/soulprint/{project_id}',
            'processing_time': conversation.processing_time,
            'patterns_identified': len(soulprint_analysis.get('patterns', [])),
            'personalization_level': 'high'
        })
        
    except openai.error.RateLimitError:
        return jsonify({
            'success': False,
            'error': 'OpenAI API rate limit exceeded. Please try again in a moment.',
            'retry_after': 60
        }), 429
        
    except openai.error.InvalidRequestError as e:
        return jsonify({
            'success': False,
            'error': f'OpenAI API error: {str(e)}'
        }), 400
        
    except openai.error.AuthenticationError:
        return jsonify({
            'success': False,
            'error': 'OpenAI API authentication failed. Please check API key configuration.'
        }), 500
        
    except Exception as e:
        # Log the full error for debugging
        app.logger.error(f"Voice onboarding error: {str(e)}", exc_info=True)
        
        return jsonify({
            'success': False,
            'error': 'Internal processing error. Please try again.',
            'debug_info': str(e) if app.debug else None
        }), 500

def extract_comprehensive_soulprint(responses):
    """Extract detailed soulprint from voice responses"""
    
    # Combine all responses for analysis
    combined_responses = "\n\n".join([
        f"Q{i+1}: {response}" for i, response in enumerate(responses)
    ])
    
    system_prompt = """You are the OperatorOS Soulprint Extraction Agent. Analyze these 10 voice responses to create a comprehensive operational soulprint.

Extract and structure the following patterns:

CORE OPERATIONAL PATTERNS:
- Decision Making Style: How they approach problems and choices
- Information Processing: How they gather, analyze, and use information
- Energy Management: What energizes vs drains them
- Communication Preferences: How they like to give/receive information
- Work Environment: Optimal conditions for productivity
- Learning Style: How they acquire new skills and knowledge
- Stress Response: How they handle pressure and challenges
- Goal Orientation: How they set and pursue objectives

BUSINESS & PROFESSIONAL PATTERNS:
- Leadership Style: How they guide and influence others
- Collaboration Preferences: How they work with teams
- Innovation Approach: How they generate and implement new ideas
- Risk Tolerance: How they handle uncertainty and risk
- Time Management: How they structure and prioritize time
- Quality Standards: What excellence means to them

PERSONAL OPTIMIZATION PATTERNS:
- Motivation Drivers: What keeps them engaged and driven
- Growth Areas: Where they want to develop and improve
- Friction Points: Common obstacles and bottlenecks
- Success Metrics: How they define and measure progress
- Values Alignment: Core principles that guide decisions
- Life Balance: How they integrate work and personal priorities

Return a structured JSON object with detailed analysis for each pattern."""
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": combined_responses}
            ],
            max_tokens=2000,
            temperature=0.3
        )
        
        content = response.choices[0].message.content
        
        # Try to parse as JSON, fallback to structured text
        try:
            return json.loads(content)
        except json.JSONDecodeError:
            return {
                "analysis": content,
                "summary": "Comprehensive soulprint analysis completed",
                "patterns": ["decision_making", "information_processing", "energy_management"],
                "extraction_method": "voice_onboarding",
                "response_count": len(responses)
            }
            
    except Exception as e:
        # Fallback soulprint if API fails
        return {
            "analysis": "Soulprint extraction encountered an issue, but basic patterns were identified.",
            "summary": "Voice-based operational analysis",
            "patterns": ["communication_style", "work_preferences", "goal_orientation"],
            "extraction_method": "voice_onboarding_fallback",
            "response_count": len(responses),
            "error": str(e)
        }

def generate_voice_based_project(soulprint_analysis, responses):
    """Generate complete OperatorOS project based on voice soulprint"""
    
    project_data = {
        "name": f"OperatorOS_Voice_Generated_{datetime.utcnow().strftime('%Y%m%d')}",
        "type": "voice_soulprint_system",
        "soulprint": soulprint_analysis,
        "voice_responses": responses,
        "features": [
            "Personalized daily flow optimization",
            "Voice-pattern business intelligence",
            "Soulprint-driven decision support",
            "Custom productivity frameworks",
            "Personal pattern analytics"
        ],
        "customization_level": "high",
        "generated_at": datetime.utcnow().isoformat()
    }
    
    return project_data

@app.route('/download/soulprint/<project_id>')
def download_soulprint_project(project_id):
    """Download voice-generated soulprint project"""
    try:
        # Find conversation with this project ID
        conversation = Conversation.query.filter_by(
            project_id=project_id,
            project_type='voice_onboarding'
        ).first()
        
        if not conversation:
            return jsonify({'error': 'Project not found'}), 404
        
        # Create ZIP file
        zip_path = create_soulprint_project_zip(
            project_id,
            {
                "soulprint": conversation.soulprint_analysis,
                "voice_responses": conversation.voice_answers
            },
            conversation.soulprint_analysis
        )
        
        return send_file(
            zip_path,
            as_attachment=True,
            download_name=f'OperatorOS_Voice_Project_{project_id}.zip',
            mimetype='application/zip'
        )
        
    except Exception as e:
        return jsonify({'error': f'Download error: {str(e)}'}), 500

def create_soulprint_project_zip(project_id, project_data, soulprint_analysis):
    """Create downloadable ZIP with complete OperatorOS project"""
    
    # Create temporary directory
    temp_dir = tempfile.mkdtemp()
    project_dir = Path(temp_dir) / f"OperatorOS_Voice_{project_id}"
    project_dir.mkdir()
    
    # Generate all project files
    files_to_create = {
        'README.md': generate_voice_project_readme(project_id, soulprint_analysis),
        'SOULPRINT.md': generate_detailed_soulprint(soulprint_analysis),
        'main.py': generate_voice_main_py(project_id, soulprint_analysis),
        'app.py': generate_voice_app_py(project_id, soulprint_analysis),
        'requirements.txt': generate_standard_requirements(),
        '.env.example': generate_voice_env_example(),
        'templates/index.html': generate_voice_interface_html(soulprint_analysis),
        'agents/voice_agent.py': generate_voice_specialized_agent(soulprint_analysis),
        'utils/soulprint_integration.py': generate_voice_soulprint_utils(soulprint_analysis),
        'docs/VOICE_SETUP.md': generate_voice_setup_guide(project_id)
    }
    
    # Create all files
    for file_path, content in files_to_create.items():
        full_path = project_dir / file_path
        full_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    # Create ZIP file
    zip_path = Path(temp_dir) / f"OperatorOS_Voice_Project_{project_id}.zip"
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in project_dir.rglob('*'):
            if file_path.is_file():
                arcname = file_path.relative_to(project_dir)
                zipf.write(file_path, arcname)
    
    return str(zip_path)
```

### 2. Enhanced Frontend Error Handling

```javascript
// Update the voice onboarding JavaScript
async function submitVoiceResponses() {
    try {
        // Show processing state
        showProcessingState();
        
        // Validate responses
        if (voiceResponses.length !== 10) {
            throw new Error(`Need 10 responses, only have ${voiceResponses.length}`);
        }
        
        // Submit to backend
        const response = await fetch('/api/demo-voice-onboarding', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                responses: voiceResponses,
                timestamp: new Date().toISOString()
            })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || `HTTP ${response.status}`);
        }
        
        if (result.success) {
            showSuccessState(result);
        } else {
            throw new Error(result.error || 'Unknown processing error');
        }
        
    } catch (error) {
        console.error('Voice onboarding error:', error);
        showErrorState(error.message);
    }
}

function showProcessingState() {
    const container = document.querySelector('.processing-container');
    container.innerHTML = `
        <div class="processing-success">
            <div class="spinner"></div>
            <h3>Extracting Your Soulprint...</h3>
            <p>Our multi-AI system is analyzing your responses to create your personalized OperatorOS project.</p>
            <div class="progress-steps">
                <div class="step active">Analyzing responses</div>
                <div class="step">Extracting patterns</div>
                <div class="step">Generating system</div>
                <div class="step">Creating download</div>
            </div>
        </div>
    `;
}

function showSuccessState(result) {
    const container = document.querySelector('.processing-container');
    container.innerHTML = `
        <div class="success-state">
            <div class="success-icon">✅</div>
            <h3>Your OperatorOS is Ready!</h3>
            <p>Soulprint extracted with ${result.patterns_identified} core patterns identified</p>
            <div class="download-section">
                <a href="${result.download_url}" class="download-btn">
                    📦 Download Your Personalized OperatorOS
                </a>
                <p class="processing-time">Generated in ${result.processing_time?.toFixed(1)}s</p>
            </div>
            <div class="next-steps">
                <h4>Next Steps:</h4>
                <ol>
                    <li>Download your personalized system</li>
                    <li>Upload to a new Replit project</li>
                    <li>Add your OpenAI API key</li>
                    <li>Start using your custom OperatorOS!</li>
                </ol>
            </div>
        </div>
    `;
}

function showErrorState(errorMessage) {
    const container = document.querySelector('.processing-container');
    container.innerHTML = `
        <div class="error-state">
            <div class="error-icon">⚠️</div>
            <h3>Processing Error</h3>
            <p class="error-message">${errorMessage}</p>
            <div class="error-actions">
                <button onclick="retryVoiceOnboarding()" class="retry-btn">
                    🔄 Try Again
                </button>
                <button onclick="contactSupport()" class="support-btn">
                    💬 Get Help
                </button>
            </div>
            <div class="troubleshooting">
                <h4>Common Solutions:</h4>
                <ul>
                    <li>Check your internet connection</li>
                    <li>Ensure you answered all 10 questions</li>
                    <li>Try refreshing the page</li>
                    <li>Contact support if issue persists</li>
                </ul>
            </div>
        </div>
    `;
}
```

### 3. Environment Configuration Check

Make sure your Replit has these environment variables set:

```bash
# In Replit Secrets:
OPENAI_API_KEY=your-actual-openai-api-key
SECRET_KEY=your-flask-secret-key
DATABASE_URL=sqlite:///operatoros.db
DEBUG=True
```

### 4. Database Initialization

```python
# Add to your app initialization
with app.app_context():
    try:
        db.create_all()
        print("✅ Database initialized successfully")
    except Exception as e:
        print(f"❌ Database initialization error: {e}")
```

## Testing Steps

1. **Apply these fixes** to your Replit project
2. **Check environment variables** are properly set
3. **Restart the application** 
4. **Test the voice onboarding** again
5. **Check console logs** for any remaining errors

This should resolve the "Failed to process your responses" error and give you a fully working voice-first soulprint extraction system!