# üîó Multi-API Integration Enhancement for OperatorOS

## Integration Objective
Add Claude (Anthropic) and Gemini (Google) API support to the existing OperatorOS agent system while maintaining all current functionality and stability.

## Current System Overview
The OperatorOS currently uses:
- **OpenAI GPT-3.5-turbo** as the single API provider
- **Agent.generate_response()** method for all API calls
- **Environment variable:** `OPENAI_API_KEY`
- **Configuration in:** `config.py` and `main.py`

## Required Integration Approach

### 1. üîß **Environment Variables Enhancement**
Add these new environment variables to REP Secrets:
- `CLAUDE_API_KEY` (already added)
- `GEMINI_API_KEY` (already added)
- `DEFAULT_API_PROVIDER` (optional - defaults to 'openai')

### 2. üèóÔ∏è **Agent Class Enhancement Strategy**

**Modify the base `Agent` class to support multi-API routing:**

```python
class Agent:
    def __init__(self, name, role, system_prompt, preferred_api=None):
        self.name = name
        self.role = role
        self.system_prompt = system_prompt
        self.preferred_api = preferred_api  # 'openai', 'claude', or 'gemini'
    
    def generate_response(self, input_text, conversation_history=None, api_override=None):
        # Route to appropriate API based on preference or override
        api_to_use = api_override or self.preferred_api or app.config['DEFAULT_API_PROVIDER']
        
        if api_to_use == 'claude':
            return self._generate_claude_response(input_text, conversation_history)
        elif api_to_use == 'gemini':
            return self._generate_gemini_response(input_text, conversation_history)
        else:
            return self._generate_openai_response(input_text, conversation_history)
```

### 3. üéØ **User Control Mechanism**

**Enable API selection through input prefixes:**

Users can specify which API to use by prefixing their input:
- `@claude: [user input]` - Forces Claude API for this conversation
- `@gemini: [user input]` - Forces Gemini API for this conversation  
- `@openai: [user input]` - Forces OpenAI API for this conversation
- `[no prefix]` - Uses default API (OpenAI)

### 4. üîÑ **Agent-Specific API Assignment**

**Allow different agents to use different APIs:**

```python
# Example: Mixed API agent configuration
agents = [
    AnalystAgent(preferred_api='claude'),    # Claude for analysis
    ResearcherAgent(preferred_api='gemini'), # Gemini for research  
    WriterAgent(preferred_api='openai')      # OpenAI for writing
]
```

### 5. üìä **API Provider Tracking**

**Track which API was used for each response:**
- Add `api_provider` field to `ConversationEntry` database model
- Log API usage in admin dashboard
- Enable API performance comparison

## Implementation Requirements

### ‚úÖ **Maintain Backward Compatibility**
- All existing OpenAI functionality must remain unchanged
- Default behavior should be identical to current system
- No breaking changes to existing API endpoints

### ‚úÖ **Error Handling Enhancement**
- Graceful fallback: If preferred API fails, try backup APIs
- Unified error handling across all three APIs
- Maintain existing retry mechanism for all providers

### ‚úÖ **Configuration Management**
```python
# New config.py additions
CLAUDE_API_KEY = os.environ.get('CLAUDE_API_KEY')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
DEFAULT_API_PROVIDER = os.environ.get('DEFAULT_API_PROVIDER', 'openai')

# API-specific configurations
CLAUDE_MODEL = os.environ.get('CLAUDE_MODEL', 'claude-3-sonnet-20240229')
GEMINI_MODEL = os.environ.get('GEMINI_MODEL', 'gemini-pro')
```

### ‚úÖ **Library Requirements**
Add these to requirements or install them:
- `anthropic` (for Claude API)
- `google-generativeai` (for Gemini API)

## User Experience Design

### üéÆ **Simple User Controls**

**Command Examples:**
```
# Use specific API for this conversation
@claude: I need help building a fitness app

# Use specific API for just this message  
@gemini: Research the latest trends in mobile app development

# Mixed conversation - different APIs per agent
@mixed: Create a comprehensive business plan
# -> Analyst uses Claude, Researcher uses Gemini, Writer uses OpenAI
```

### üîç **Admin Dashboard Integration**

**New Admin Features:**
- API usage statistics per provider
- Performance comparison (response time, quality)
- Cost tracking per API provider
- API health monitoring for all three providers

### üìà **Advanced Features (Future)**

**Smart API Routing:**
- Automatic API selection based on task type
- Load balancing across APIs
- Quality-based API preference learning

## Testing Strategy

### üß™ **Integration Validation**

**Test Cases:**
1. **Default Behavior:** Ensure OpenAI still works as primary
2. **API Override:** Test `@claude:` and `@gemini:` prefixes
3. **Mixed Agent APIs:** Different APIs per agent in loop
4. **Fallback Mechanism:** Primary API fails, backup succeeds
5. **Error Handling:** All APIs fail gracefully
6. **Database Tracking:** API provider correctly logged

### üîí **Security Considerations**
- Validate all three API keys on startup
- Separate rate limiting per API provider
- Secure API key storage (environment variables only)
- No API keys exposed in logs or error messages

## Deployment Instructions

### üìù **Step-by-Step Integration**

1. **Environment Setup:** Add Claude and Gemini API keys to REP Secrets
2. **Library Installation:** Add anthropic and google-generativeai packages  
3. **Config Enhancement:** Update config.py with new API configurations
4. **Agent Class Modification:** Implement multi-API routing in base Agent class
5. **Input Parsing:** Add prefix detection for API selection
6. **Database Schema:** Add api_provider field to ConversationEntry
7. **Admin Dashboard:** Update to show multi-API statistics
8. **Testing:** Validate all functionality with test prompts

### üéØ **Success Criteria**
- All three APIs work seamlessly
- Users can control API selection via prefixes
- No disruption to existing OpenAI functionality
- Complete loop execution works with any API combination
- Admin dashboard shows multi-API metrics
- Error handling and fallbacks work correctly

---

## Implementation Prompt for REP

**"Please integrate Claude and Gemini API support into the OperatorOS agent system. Add user control via @claude: and @gemini: prefixes while maintaining all existing OpenAI functionality. Include API provider tracking in the database and admin dashboard. Ensure graceful fallbacks and maintain the existing retry mechanism across all APIs."**

This enhancement will give users full control over which AI provider handles their conversations while keeping the system robust and backward-compatible.